#! /usr/bin/env tclsh

source $::env(HOME)/bin/lib.tcl

set dst $::env(HOME)/bak/save
set nam [exec hostname]
set tmp ${nam}_[clock format [clock seconds] -gmt true -format %y%m%d-%H%M%S]
set src $TMPD/$tmp
set zip $tmp.tgz
set want "$::env(HOME)/doc/*doc \
          $::env(HOME)/cfg/*dotfiles \
          $::env(HOME)/.gnupg/*gnupg \
          $::env(HOME)/.ssh/*ssh"

proc msg {s} { puts "### $s ###" }

proc sep {} { puts "--------------------" }

proc prep {src nam tmp} {
  if {[file isdirectory $src]} {
    file delete -force $src
  }

  file mkdir $src
  set f [open $src/LOG w]; puts $f $tmp; close $f

  sep
  puts "created $src\nsaving \"$nam\" customisations:"
 }

proc copy {src} {
  global want

  # there cannot be asterisk (*) anywhere except as file*name separator
  # as specified in this declaration. see copy()
  foreach i $want {
    lassign [split $i *] f n
    if {{} eq $n} {
      regsub {^\.(.+)$} [file tail $f] {\1} m
      set n $m
    }

    if {![file readable $f]} {
      msg "invalid file $f"
      continue
    }
    if {[file readable $src/$n]} {
      msg "name \"$n\" already exists"
      continue
    }

    if {[file isfile $f]} {
      if {[catch {exec cp -d $f $src/$n}]} {
        msg "error copying $f"
        continue
      }
    } elseif {[file isdirectory $f]} {
      if {[catch {exec rsync -lr --exclude=.git $f $src/$n}]} {
        msg "error copying $f"
        continue
      }
      set n $n/
    } else {
      msg "$f is neither file nor dir"
      continue
    }

    puts "* $f  ($n)"
    set p [open $src/LOG a]; puts $p "$f * %n"; close $p
  }
}

proc etc {src} {
  exec lsmod >$src/lsmod
  puts "* lsmod"
  exec tail -n +1 {*}[glob /etc/modprobe.d/*] >$src/modprobe
  puts "* modprobe"
  exec ls "$::env(HOME)/opt/" >$src/opt
  puts "* ~/opt/"
  exec tail -n +1 {*}[glob /etc/X11/xorg.conf.d/*] >$src/xorg
  puts "* refind"
  exec cp /boot/EFI/refind/refind.conf $src/refind
  exec xbps-query --list-pkgs >$src/installed
  puts "* packages installed"
  exec ls /var/service/ >$src/services
  puts "* services enabled"
}

proc save {src nam dst} {
  cd $src/..
  if {[catch {exec tar czf $dst $nam}]} { fail "error zipping" }
}

proc fin {src zip dst} {
  if {[file isdirectory $src]} { file delete -force $src }
  puts "removed $src"

  set p [open |[list du -hs $dst/$zip] r]
  regsub {^(\S+).+$} [read $p] {\1} size
  close $p

  sep
  puts "$zip ($size) saved in $dst"
}

prep $src $nam $tmp
copy $src
etc  $src
save $src $tmp $dst/$zip
fin  $src $zip $dst
