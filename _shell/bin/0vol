#! /usr/bin/env tclsh

source $::env(HOME)/bin/lib.tcl

need ponymix notify-send

# vars

set devs [dict create \
  std  alsa_output.pci-0000_00_1f.3.analog-stereo \
  mic  alsa_input.pci-0000_00_1f.3.analog-stereo \
  cx   bluez_sink.00_1B_66_8C_6C_44.a2dp_sink \
  clip bluez_sink.00_12_6F_EE_F0_F7.a2dp_sink ]
set dev {}
set ismic false
set base "ponymix --sink --device "
set cmd {}
set notify {notify-send -u low -t 2000 -i}

# which?

if {{bt} ne [lindex $::argv 0]} {
  set dev std
} else {
  set ::argv [lrange $::argv 1 end]
  if [catch {exec ponymix --sink list | grep {: bluez_}}] {
    exec {*}$notify network-bluetooth vol {no bt audio}
    exit
  } else {
    switch -- [exec ponymix --sink list \
               | grep {: bluez_} | head -1 | cut {-d } -f3] \
      [dict get $devs cx]   { set dev cx } \
      [dict get $devs clip] { set dev clip } \
      default { fail {unrecognised device} }
  }
}
append base [dict get $devs $dev]
set cmd $base

# mic?

if {{mic} eq [lindex $::argv 0]} {
  set ::argv [lrange $::argv 1 end]
  set ismic true
  set base "ponymix --source --device "
  if ![catch {exec ponymix --source list \
       | grep [exec echo [dict get $devs $dev] | cut -d. -f2] \
       | grep {\(source\.\|input\.\)} \
       | cut {-d } -f3} \
       micdev] {
    append base $micdev
  } else {
    set dev std
    append base [dict get $devs mic]
  }
  set cmd $base
}

# build command

switch -- [string index [lindex $::argv 0] 0] {
  {} {}
  x { append cmd { toggle} }
  - { append cmd " decrease [string range $::argv 1 end]" }
  + { append cmd " increase [string range $::argv 1 end]" }
  default { fail "Usage: $ME \[bt] \[mic] ''|x|-N|+N" nome }
}

# execute ponymix

exec {*}$cmd

# build notification

switch -- [string index [lindex $::argv 0] 0] {
  {} {
    set arg " audio-ready"
    if {$ismic} { set arg " mic-ready" }
    append notify "$arg vol \"$dev [exec {*}$base get-volume]%\""
  }
  x {
    set arg " audio-off vol \"$dev muted\""
    if {$ismic} { set arg " mic-off vol \"$dev muted\"" }
    if [catch {exec {*}$base is-muted}] {
      set arg " audio-on vol \"$dev on\""
      if {$ismic} { set arg " mic-on vol \"$dev on\"" }
    }
    append notify $arg
  }
  - {
    set arg " audio-volume-medium"
    if {$ismic} { set arg " microphone-sensitivity-medium" }
    append notify "$arg vol \"$dev [exec {*}$base get-volume]%\""
  }
  + {
    set arg " audio-volume-high"
    if {$ismic} { set arg " microphone-sensitivity-high" }
    append notify "$arg vol \"$dev [exec {*}$base get-volume]%\""
  }
}

# notify

exec {*}$notify

